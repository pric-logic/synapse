"""
Configuration file for Project Synapse
Manages API keys, model settings, and other configuration parameters
"""

import os
from typing import Optional
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class Config:
    """Configuration class for Project Synapse"""
    
    # Gemini API Configuration
    GEMINI_API_KEY: str = os.getenv("GEMINI_API_KEY", "")
    GEMINI_MODEL: str = os.getenv("GEMINI_MODEL", "gemini-1.5-pro")
    GEMINI_SAFETY_SETTINGS: dict = {
        "HARM_CATEGORY_HARASSMENT": "BLOCK_MEDIUM_AND_ABOVE",
        "HARM_CATEGORY_HATE_SPEECH": "BLOCK_MEDIUM_AND_ABOVE",
        "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_MEDIUM_AND_ABOVE",
        "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_MEDIUM_AND_ABOVE",
    }
    
    # API Configuration
    API_HOST: str = os.getenv("API_HOST", "0.0.0.0")
    API_PORT: int = int(os.getenv("API_PORT", "8000"))
    API_DEBUG: bool = os.getenv("API_DEBUG", "false").lower() == "true"
    
    # Cache Configuration
    CACHE_TTL: int = int(os.getenv("CACHE_TTL", "3600"))  # 1 hour
    CACHE_MAX_SIZE: int = int(os.getenv("CACHE_MAX_SIZE", "1000"))
    
    # Performance Configuration
    MAX_RESPONSE_TIME: float = float(os.getenv("MAX_RESPONSE_TIME", "0.3"))  # 0.3 seconds
    PREDICTION_CACHE_SIZE: int = int(os.getenv("PREDICTION_CACHE_SIZE", "500"))
    
    # Multimodal Configuration
    MAX_IMAGE_SIZE: int = int(os.getenv("MAX_IMAGE_SIZE", "4194304"))  # 4MB
    SUPPORTED_IMAGE_FORMATS: list = ["JPEG", "PNG", "WEBP", "HEIC"]
    MAX_AUDIO_DURATION: int = int(os.getenv("MAX_AUDIO_DURATION", "60"))  # 60 seconds
    
    @classmethod
    def validate(cls) -> bool:
        """Validate configuration"""
        if not cls.GEMINI_API_KEY:
            print("⚠️  Warning: GEMINI_API_KEY not set. Please set it in your .env file.")
            return False
        return True
    
    @classmethod
    def get_gemini_config(cls) -> dict:
        """Get Gemini configuration"""
        return {
            "api_key": cls.GEMINI_API_KEY,
            "model": cls.GEMINI_MODEL,
            "safety_settings": cls.GEMINI_SAFETY_SETTINGS,
        }

# Global configuration instance
config = Config()
